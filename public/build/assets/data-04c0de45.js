import{_ as g,g as k,x as w,y as z,c as r,b as o,F as u,i as _,o as d,n as D,t as l,m as f,d as C,r as v,h as M,j as b,z as S,s as j,p as B,k as O,f as P}from"./_plugin-vue_export-helper-46505c61.js";import{z as A,m as $,i as q,s as m,a as T,l as U,c as L,f as N,d as I,b as E}from"./indexRollupNext-1b7c4933.js";const W=k({name:"MapData",props:{geojson:{type:Object,required:!0},data:{type:Object,required:!0},modes:{type:Array,required:!0},tooltip_third_row_label:{type:String,default:""}},emits:["mode-change","polygon-clicked"],data(){return{mode:this.modes[0],polygons:null,path:null,svg:null,projection:null,colors:null,max:null,height:500,width:500,zoomTransform:0,tooltip:null,selected:null}},watch:{mode(t){this.$emit("mode-change",t)},data(){this.init()}},computed:{mapData(){return this.data[this.mode]},zoom(){return A().scaleExtent([.5,250]).translateExtent([[-.5*this.width,-.75*this.height],[2.5*this.width,2.5*this.height]]).on("zoom",this.handleZoom)}},mounted(){console.log("Map mounted: initializing"),this.geojson&&this.init()},updated(){console.log("Map updated: re-initializing"),this.init()},methods:{init(){this.geojson.features?(this.init_variables(),this.init_legend(),this.init_svg(),this.render_map()):console.log("No geojson")},init_variables(){this.polygons=null,this.path=null,this.svg={},this.height=window.innerHeight*.8,this.width=window.innerWidth*.65,window.innerWidth<800?this.projection=$().scale(600).center([110,20]):this.projection=$().scale(1e3).center([80,27.5]),this.path=q().projection(this.projection),this.tooltip=this.init_tooltip()},init_tooltip(){return m("body .d3-tooltip").empty()||m("body .d3-tooltip").remove(),m("body").append("div").attr("class","d3-tooltip").style("position","absolute").style("top","0").style("z-index","10").style("visibility","hidden").style("padding","10px").style("background","rgba(0,0,0,0.75)").style("border-radius","4px").style("color","#fff").text("a simple tooltip")},init_legend(){this.colors={},this.legend={},this.max=T(this.mapData,t=>t.value),this.colors=U().domain([0,1,this.max/3,this.max]).range(["#c33","#488","#fd0","#24ff00"]).clamp(!0),this.legend=L().shapeHeight(20).shapeWidth(60).scale(this.colors).labelFormat(N(",.0f")).orient("horizontal").labelOffset(-10).labelAlign("middle").cells(6)},init_svg(){m("#map-container svg.svg-content").empty()||m("#map-container svg.svg-content").remove(),this.svg=m("#map-container").append("svg").attr("preserveAspectRatio","xMinYMin meet").attr("width",this.width).attr("height",this.height).classed("svg-content",!0),this.zoomTransform||(this.zoomTransform=w(this.svg.node())),this.height>this.width&&this.legend.shapeWidth(35).cells(4)},render_map(){let t=this.svg.append("g").classed("map-boundary",!0).selectAll("path").append("g");this.svg.append("g").classed("map-labels",!0).selectAll("text").append("g"),this.polygons=t.append("g").classed("polygons",!0),this.geojson.features.forEach(e=>{this.drawPolygon(e)}),this.svg.append("g").attr("class","legend").attr("transform","translate("+this.width*.55+", 25)").call(this.legend),this.svg.call(this.zoom),this.svg.call(this.zoom.transform,this.zoomTransform)},drawPolygon(t){this.polygons.append("g").data([t]).enter().append("path").attr("d",this.path).attr("id",this.getPolygonId(t.properties)).attr("fill",e=>this.color_polygon(t.properties)).on("mouseover",(e,s)=>{this.tooltip.html(this.hover_text(t.properties)).style("visibility","visible")}).on("mousemove",(e,s)=>{this.tooltip.style("top",e.pageY-10+"px").style("left",e.pageX+10+"px")}).on("mouseout",()=>this.tooltip.html("").style("visibility","hidden")).on("click",(e,s)=>this.clicked(s))},getPolygonId(t){let e=t.region,s=[" ","&","(",")","."];return t.state!=null&&(e=t.state),t.district!=null&&(e=t.district),s.forEach(a=>{e=e.replaceAll(a,"_")}),e},clicked(t){let e={name:t.properties[this.mode],value:0,mode:this.mode},s=this.mapData.find(a=>a.name==e.name);e.value=s?s.value:0,this.zoomToPolygon(t),this.$emit("polygon-clicked",e)},zoomToPolygon(t){let e=null;this.selected==null||this.selected!=t.properties[this.mode]?(e=t,this.selected=t.properties[this.mode]):(e=this.geojson,this.selected=null);let[[s,a],[i,c]]=this.path.bounds(e);this.svg.transition().duration(1500).call(this.zoom.transform,z.translate(this.width/2,this.height/2).scale(Math.min(8,.9/Math.max((i-s)/this.width,(c-a)/this.height))).translate(-(s+i)/2,-(a+c)/2))},drawPolygonBoundary(t){this.polygons.append("g").data([t]).enter().append("path").classed("state-boundary",!0).classed("selected-polygon",e=>this.selected.state&&e.properties.state==this.selected.state||this.selected.region&&e.properties.region==this.selected.region).attr("properties",e=>JSON.stringify(e.properties)).attr("d",this.path).attr("id",this.getPolygonId(t.properties))},drawPolygonLabel(t,e){const s=this.regional_data[this.polygon_mode].find(i=>i[this.polygon_key]==e.properties[this.polygon_key]);let a="";s&&(a=this.format_number(s[this.data_mode])),t.append("g").data([e]).enter().append("text").classed("poly_text",!0).attr("x",i=>this.path.centroid(i)[0]).attr("y",i=>this.path.centroid(i)[1]).classed("small-text",!0).attr("text-anchor","middle").text(a).on("mouseover",()=>{this.tooltip.html(this.hover_text(e.properties)).style("visibility","visible")}).on("mousemove",(i,c)=>{this.tooltip.style("top",i.pageY-10+"px").style("left",i.pageX+10+"px")}).on("mouseout",()=>this.tooltip.html("").style("visibility","hidden")).on("click",(i,c)=>this.clicked(c))},color_polygon(t){let e=this.mapData.find(s=>s.name==t[this.mode]);return e?this.colors(e.value):this.colors(0)},handleZoom(t){this.zoomTransform=t.transform;let e=1/t.transform.k*.8;this.svg.selectAll(".poly_text").attr("transform",t.transform).style("font-size",`${e}rem`),this.svg.selectAll("path").attr("transform",t.transform),this.svg.selectAll("circle").attr("transform",t.transform).attr("r",e)},hover_text(t){var s;let e=["state","district"].map(a=>`<tr><td>${this.capitalizeWords(a)}</td><td>${t[a]?t[a]:"-"}</td></tr>`);return e.push(`<tr><td>${this.tooltip_third_row_label}</td><td>${((s=this.mapData.find(a=>a.name==t[this.mode]))==null?void 0:s.value)||0}</td></tr>`),`<table border='1' class='d3-tooltip'>${e.join(`
`)}</table>`},format_number(t){return t.toString().replace(/\B(?=(\d{3})+(?!\d))/g,",")},capitalizeWords(t){return t?t.charAt(0).toUpperCase()+t.slice(1):""}}}),F={class:"switcher switcher-sm text-center py-2 bg-dark"},V=["onClick","textContent"],J=o("div",{id:"map"},[o("div",{id:"map-container"})],-1);function Y(t,e,s,a,i,c){return d(),r(u,null,[o("div",F,[(d(!0),r(u,null,_(t.modes,h=>(d(),r("button",{class:D(["btn mx-1",h===t.mode?"btn-success":"btn-outline-success bg-light"]),key:h,onClick:n=>t.mode=h,textContent:l(h)},null,10,V))),128))]),J],64)}const H=g(W,[["render",Y]]);const R={name:"LoadingData",computed:{...f({loading:t=>t.data.loading})}},X={key:0,class:"loading-container"},Z=o("div",{class:"circle"},null,-1),G=o("div",{class:"circle"},null,-1),K=o("div",{class:"circle"},null,-1),Q=o("div",{class:"circle"},null,-1),tt={class:"text"};function et(t,e,s,a,i,c){return t.loading?(d(),r("div",X,[Z,G,K,Q,o("div",tt,l(t.loading),1)])):C("",!0)}const st=g(R,[["render",et]]);const ot={name:"MapBBMData",components:{MapData:H,LoadingData:st},data(){return{geojson:{district:I,state:E},mode:"state",selected:{state:null,district:null}}},computed:{...f({district_coordinators:t=>t.district_coordinators.all_data,map_data:t=>t.data.map_data}),filtered_map_data(){let t=JSON.parse(JSON.stringify(this.map_data));return this.selected.state!=null&&(t.state=t.state.filter(e=>e.name===this.selected.state)),this.selected.district!=null&&(t.district=t.district.filter(e=>e.name===this.selected.district)),t}},mounted(){},watch:{map_data(t){console.log("mapData changed",t)}},methods:{valueFromLabel(t){return t.replace(/\s/g,"_").toLowerCase()},polygonClick(t){this.selected[t.mode]=this.selected[t.mode]===t.name?null:t.name,this.selected[t.mode==="state"?"district":"state"]=null}}},at={class:"map-container border border-danger rounded"};function it(t,e,s,a,i,c){const h=v("loading-data"),n=v("map-data");return d(),r(u,null,[M(l(i.selected)+" ",1),o("div",at,[b(h),b(n,{geojson:i.geojson[i.mode],data:c.filtered_map_data,modes:["state","district"],tooltip_third_row_label:"Observations",onModeChange:e[0]||(e[0]=p=>i.mode=p),onPolygonClicked:c.polygonClick},null,8,["geojson","data","onPolygonClicked"])])],64)}const nt=g(ot,[["render",it]]);const lt=k({name:"DataComponent",components:{MapBBMData:nt},data(){return{filters:[{id:1,name:"Portals",active:!1},{id:2,name:"Location",active:!1},{id:3,name:"Taxa",active:!1},{id:4,name:"Date",active:!1},{id:5,name:"Users",active:!0}]}},computed:{...f({observations:t=>t.data.observations,taxa:t=>t.data.taxa}),observation_stats(){return Object.keys(this.observations).length===0?(console.log("no observations"),{}):{counts:this.observationStats(this.observations.counts),inat:this.observationStats(this.observations.inats),ibp:this.observationStats(this.observations.ibps),ifb:this.observationStats(this.observations.ifbs),total:this.observationStats([].concat(...Object.values(this.observations)))}},observation_table_stats(){let t=[];for(let[e,s]of Object.entries(this.observation_stats))t.push({portal:e,observations:s.observations,users:s.users,states:s.states,districts:s.districts});return t},taxa_stats(){const t=Object.values(this.observations).flat();return S(this.taxa,s=>s.rank).map(s=>({rank:s[0],count:t.filter(a=>s[1].map(i=>i.id).includes(a[1])).length,unique:this.countUnique(s[1].map(a=>a.name))})).filter(s=>s.count>0)}},mounted(){j.dispatch("data/getAllData")},methods:{observationStats(t){return{observations:t.length,users:this.countUnique(t.map(s=>s[2])),states:this.countUnique(t.map(s=>s[4])),districts:this.countUnique(t.map(s=>s[5]))}},getObservationsCount(t){let e=0;return t.map(s=>{Object.keys(this.observations).forEach(a=>{e+=this.observations[a].filter(i=>i[1]==s.id).length})}),e},countUnique(t){return[...new Set(t)].length}}}),y=t=>(B("data-v-3db338f9"),t=t(),O(),t),rt={class:"data-container"},dt={class:"filters"},ct=y(()=>o("div",{class:"expand-btn"}," >> ",-1)),ht={class:"filter-list"},pt=["onClick"],mt={class:"header"},ut={class:"canvas"},_t={class:"observations"},gt={class:"table table-sm"},vt=y(()=>o("thead",{class:"bg-info"},[o("tr",null,[o("th",{scope:"col"},"Portal"),o("th",{scope:"col"},"Observations"),o("th",{scope:"col"},"Users"),o("th",{scope:"col"},"States"),o("th",{scope:"col"},"Districts")])],-1)),bt={class:"table-info"},ft={class:"table table-sm"},yt=y(()=>o("thead",{class:"bg-danger text-light"},[o("tr",null,[o("th",null,"Rank"),o("th",null,"Count"),o("th",null,"Unique")])],-1)),xt={class:"table-danger"},$t={class:"taxa"};function kt(t,e,s,a,i,c){const h=v("MapBBMData");return d(),r("div",rt,[o("div",dt,[ct,o("ul",ht,[(d(!0),r(u,null,_(t.filters,n=>(d(),r("li",{key:n.id,class:D({active:n.active}),onClick:p=>n.active=!n.active},[o("div",mt,l(n.name),1)],10,pt))),128))])]),o("div",ut,[o("div",_t,[o("table",gt,[vt,o("tbody",bt,[(d(!0),r(u,null,_(t.observation_table_stats,(n,p)=>(d(),r("tr",{key:p},[o("td",null,l(n.portal),1),o("td",null,l(n.observations),1),o("td",null,l(n.users),1),o("td",null,l(n.states),1),o("td",null,l(n.districts),1)]))),128))])]),o("table",ft,[yt,o("tbody",xt,[(d(!0),r(u,null,_(t.taxa_stats,(n,p)=>(d(),r("tr",{key:p},[o("td",null,l(n.rank),1),o("td",null,l(n.count),1),o("td",null,l(n.unique),1)]))),128))])])]),o("div",$t,[b(h)])])])}const Dt=g(lt,[["render",kt],["__scopeId","data-v-3db338f9"]]),x=P({});x.component("DataComponent",Dt);x.use(j);x.mount("#app");
