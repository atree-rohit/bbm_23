import{_ as v,g as S,x as D,y as z,c as d,o as c,b as s,m as y,t as r,d as O,r as b,j as f,z as M,s as j,F as p,i as _,n as C,p as P,k as q,f as w}from"./_plugin-vue_export-helper-46505c61.js";import{z as B,m as k,i as U,s as u,a as A,l as L,c as T,f as I,d as $,b as N}from"./indexRollupNext-1b7c4933.js";const E=S({name:"MapData",props:{geojson:{type:Object,required:!0},data:{type:Object,required:!0},mode:{type:String,required:!0},tooltip_third_row_label:{type:String,default:""}},emits:["mode-change","polygon-clicked"],data(){return{polygons:null,path:null,svg:null,projection:null,colors:null,max:null,height:500,width:500,zoomTransform:0,tooltip:null,selected:null}},watch:{mode(t){this.$emit("mode-change",t)},data(){this.init()}},computed:{mapData(){return this.data[this.mode]},zoom(){return B().scaleExtent([.5,250]).translateExtent([[-.5*this.width,-.75*this.height],[2.5*this.width,2.5*this.height]]).on("zoom",this.handleZoom)}},mounted(){console.log("Map mounted: initializing"),this.geojson&&this.init()},updated(){console.log("Map updated: re-initializing"),this.init()},methods:{init(){this.geojson[this.mode].features?(this.init_variables(),this.init_legend(),this.init_svg(),this.render_map()):console.log("No geojson")},init_variables(){this.polygons=null,this.path=null,this.svg={},this.height=window.innerHeight*.8,this.width=window.innerWidth*.65,window.innerWidth<800?this.projection=k().scale(600).center([110,20]):this.projection=k().scale(1e3).center([80,27.5]),this.path=U().projection(this.projection),this.tooltip=this.init_tooltip()},init_tooltip(){return u("body .d3-tooltip").empty()||u("body .d3-tooltip").remove(),u("body").append("div").attr("class","d3-tooltip").style("position","absolute").style("top","0").style("z-index","10").style("visibility","hidden").style("padding","10px").style("background","rgba(0,0,0,0.75)").style("border-radius","4px").style("color","#fff").text("a simple tooltip")},init_legend(){this.colors={},this.legend={};let t=this.mapData;this.selected!=null&&(t=this.data.district),this.max=A(t,e=>e.value),this.colors=L().domain([0,1,this.max/3,this.max]).range(["#c33","#488","#fd0","#24ff00"]).clamp(!0),this.legend=T().shapeHeight(20).shapeWidth(60).scale(this.colors).labelFormat(I(",.0f")).orient("horizontal").labelOffset(-10).labelAlign("middle").cells(6)},init_svg(){u("#map-container svg.svg-content").empty()||u("#map-container svg.svg-content").remove(),this.svg=u("#map-container").append("svg").attr("preserveAspectRatio","xMinYMin meet").attr("width",this.width).attr("height",this.height).classed("svg-content",!0),this.zoomTransform||(this.zoomTransform=D(this.svg.node())),this.height>this.width&&this.legend.shapeWidth(35).cells(4)},render_map(){let t=this.svg.append("g").classed("map-boundary",!0).selectAll("path").append("g");this.svg.append("g").classed("map-labels",!0).selectAll("text").append("g"),this.polygons=t.append("g").classed("polygons",!0),this.selected!=null?this.geojson.district.features.filter(a=>a.properties.state==this.selected).map(a=>this.drawPolygon(a)):this.geojson[this.mode].features.forEach(e=>{this.drawPolygon(e)}),this.svg.append("g").attr("class","legend").attr("transform","translate("+this.width*.55+", 25)").call(this.legend),this.svg.call(this.zoom),this.svg.call(this.zoom.transform,this.zoomTransform)},drawPolygon(t){this.polygons.append("g").data([t]).enter().append("path").attr("d",this.path).attr("id",this.getPolygonId(t.properties)).attr("fill",e=>this.color_polygon(t.properties)).on("mouseover",(e,a)=>{this.tooltip.html(this.hover_text(t.properties)).style("visibility","visible")}).on("mousemove",(e,a)=>{this.tooltip.style("top",e.pageY-10+"px").style("left",e.pageX+10+"px")}).on("mouseout",()=>this.tooltip.html("").style("visibility","hidden")).on("click",(e,a)=>this.clicked(a))},getPolygonId(t){let e=t.region,a=[" ","&","(",")","."];return t.state!=null&&(e=t.state),t.district!=null&&(e=t.district),a.forEach(o=>{e=e.replaceAll(o,"_")}),e},clicked(t){let e={name:t.properties[this.mode],value:0,mode:this.mode},a=this.mapData.find(o=>o.name==e.name);e.value=a?a.value:0,this.zoomToPolygon(t),this.$emit("polygon-clicked",e)},zoomToPolygon(t){let e=null;this.selected==null||this.selected!=t.properties[this.mode]?(e=t,this.selected=t.properties[this.mode]):(e=this.geojson[this.mode],this.selected=null);let[[a,o],[i,l]]=this.path.bounds(e);this.svg.transition().duration(1500).call(this.zoom.transform,z.translate(this.width/2,this.height/2).scale(Math.min(8,.9/Math.max((i-a)/this.width,(l-o)/this.height))).translate(-(a+i)/2,-(o+l)/2))},drawPolygonBoundary(t){this.polygons.append("g").data([t]).enter().append("path").classed("state-boundary",!0).classed("selected-polygon",e=>this.selected.state&&e.properties.state==this.selected.state||this.selected.region&&e.properties.region==this.selected.region).attr("properties",e=>JSON.stringify(e.properties)).attr("d",this.path).attr("id",this.getPolygonId(t.properties))},drawPolygonLabel(t,e){const a=this.regional_data[this.polygon_mode].find(i=>i[this.polygon_key]==e.properties[this.polygon_key]);let o="";a&&(o=this.format_number(a[this.data_mode])),t.append("g").data([e]).enter().append("text").classed("poly_text",!0).attr("x",i=>this.path.centroid(i)[0]).attr("y",i=>this.path.centroid(i)[1]).classed("small-text",!0).attr("text-anchor","middle").text(o).on("mouseover",()=>{this.tooltip.html(this.hover_text(e.properties)).style("visibility","visible")}).on("mousemove",(i,l)=>{this.tooltip.style("top",i.pageY-10+"px").style("left",i.pageX+10+"px")}).on("mouseout",()=>this.tooltip.html("").style("visibility","hidden")).on("click",(i,l)=>this.clicked(l))},color_polygon(t){let e="state";t.district!=null&&(e="district");let a=this.data[e].find(o=>o.name==t[e]);return a?this.colors(a.value):this.colors(0)},handleZoom(t){this.zoomTransform=t.transform;let e=1/t.transform.k*.8;this.svg.selectAll(".poly_text").attr("transform",t.transform).style("font-size",`${e}rem`),this.svg.selectAll("path").attr("transform",t.transform),this.svg.selectAll("circle").attr("transform",t.transform).attr("r",e)},hover_text(t){var o;let e="state";t.district!=null&&(e="district");let a=["state","district"].map(i=>`<tr><td>${this.capitalizeWords(i)}</td><td>${t[i]?t[i]:"-"}</td></tr>`);return a.push(`<tr><td>${this.tooltip_third_row_label}</td><td>${((o=this.data[e].find(i=>i.name==t[e]))==null?void 0:o.value)||0}</td></tr>`),`<table border='1' class='d3-tooltip'>${a.join(`
`)}</table>`},format_number(t){return t.toString().replace(/\B(?=(\d{3})+(?!\d))/g,",")},capitalizeWords(t){return t?t.charAt(0).toUpperCase()+t.slice(1):""}}}),W={id:"map"},F=s("div",{id:"map-container"},null,-1),J=[F];function V(t,e,a,o,i,l){return c(),d("div",W,J)}const Y=v(E,[["render",V]]);const H={name:"LoadingData",computed:{...y({loading:t=>t.data.loading})}},R={key:0,class:"loading-container"},X=s("div",{class:"circle"},null,-1),Z=s("div",{class:"circle"},null,-1),G=s("div",{class:"circle"},null,-1),K=s("div",{class:"circle"},null,-1),Q={class:"text"};function tt(t,e,a,o,i,l){return t.loading?(c(),d("div",R,[X,Z,G,K,s("div",Q,r(t.loading),1)])):O("",!0)}const et=v(H,[["render",tt]]);const st={name:"MapBBMData",components:{MapData:Y,LoadingData:et},data(){return{geojson:{district:$,state:N},mode:"state",selected:{state:null,district:null}}},computed:{...y({district_coordinators:t=>t.district_coordinators.all_data,map_data:t=>t.data.map_data}),filtered_map_data(){let t=JSON.parse(JSON.stringify(this.map_data));if(this.selected.state!=null){const e=this.geojson.district.features.filter(a=>a.properties.state===this.selected.state).map(a=>a.properties.district);t.state=t.state.filter(a=>a.name===this.selected.state),t.district=t.district.filter(a=>e.includes(a.name))}return this.selected.district!=null&&(t.district=t.district.filter(e=>e.name===this.selected.district)),t}},mounted(){},watch:{map_data(t){console.log("mapData changed",t)}},methods:{valueFromLabel(t){return t.replace(/\s/g,"_").toLowerCase()},polygonClick(t){this.selected[t.mode]=this.selected[t.mode]===t.name?null:t.name,this.selected[t.mode==="state"?"district":"state"]=null,this.$emit("state-selected",this.selected)}}},at={class:"map-container border border-danger rounded"};function it(t,e,a,o,i,l){const m=b("loading-data"),n=b("map-data");return c(),d("div",at,[f(m),f(n,{geojson:i.geojson,data:l.filtered_map_data,mode:i.mode,tooltip_third_row_label:"Observations",onModeChange:e[0]||(e[0]=h=>i.mode=h),onPolygonClicked:l.polygonClick},null,8,["geojson","data","mode","onPolygonClicked"])])}const ot=v(st,[["render",it]]);const nt={name:"DataComponent",components:{MapBBMData:ot},data(){return{filters:[{id:1,name:"Portals",active:!1},{id:2,name:"Location",active:!1},{id:3,name:"Taxa",active:!1},{id:4,name:"Date",active:!1},{id:5,name:"Users",active:!0}],selected:null}},computed:{...y({observations:t=>t.data.observations,taxa:t=>t.data.taxa}),observation_stats(){return Object.keys(this.observations).length===0?(console.log("no observations"),{}):{counts:this.observationStats(this.observations.counts),inat:this.observationStats(this.observations.inats),ibp:this.observationStats(this.observations.ibps),ifb:this.observationStats(this.observations.ifbs),total:this.observationStats([].concat(...Object.values(this.observations)))}},observation_table_stats(){let t=[];for(let[e,a]of Object.entries(this.observation_stats))t.push({portal:e,observations:a.observations,users:a.users,states:a.states,districts:a.districts});return t},taxa_stats(){const t=Object.values(this.observations).flat();return M(this.taxa,a=>a.rank).map(a=>({rank:a[0],count:t.filter(o=>a[1].map(i=>i.id).includes(o[1])).length,unique:this.countUnique(a[1].map(o=>o.name))})).filter(a=>a.count>0)},state_table_data(){let t={portals:[],districts:[]},e={};return Object.keys(this.observations).map(o=>{e[o]=this.observations[o].filter(i=>i[4]===this.selected)}),Object.keys(e).map(o=>{t.portals.push({portal:o,observations:e[o].length,users:this.countUnique(e[o].map(i=>i[2])),districts:this.countUnique(e[o].map(i=>i[3]))})}),$.features.filter(o=>o.properties.state===this.selected).map(o=>o.properties.district).map(o=>{let i={};Object.keys(this.observations).map(l=>{i[l]=this.observations[l].filter(m=>m[3]===o)}),console.log(),t.districts.push({district:o,observations:Object.values(i).flat().length,users:this.countUnique(Object.values(i).flat().map(l=>l[2])),taxa:this.countUnique(Object.values(i).flat().map(l=>l[1]))})}),console.log("state_table_data",t,this.selected),t}},mounted(){j.dispatch("data/getAllData")},methods:{observationStats(t){return{observations:t.length,users:this.countUnique(t.map(a=>a[2])),states:this.countUnique(t.map(a=>a[4])),districts:this.countUnique(t.map(a=>a[5]))}},getObservationsCount(t){let e=0;return t.map(a=>{Object.keys(this.observations).forEach(o=>{e+=this.observations[o].filter(i=>i[1]==a.id).length})}),e},countUnique(t){return[...new Set(t)].length},stateSelected(t){this.selected=t.state}}},g=t=>(P("data-v-2f1abac1"),t=t(),q(),t),lt={class:"data-container"},rt={class:"filters"},dt=g(()=>s("div",{class:"expand-btn"}," >> ",-1)),ct={class:"filter-list"},ht=["onClick"],pt={class:"header"},ut={class:"canvas"},mt={class:"observations"},_t={class:"table table-sm"},gt=g(()=>s("thead",{class:"bg-info"},[s("tr",null,[s("th",{scope:"col"},"Portal"),s("th",{scope:"col"},"Observations"),s("th",{scope:"col"},"Users"),s("th",{scope:"col"},"States"),s("th",{scope:"col"},"Districts")])],-1)),vt={class:"table-info"},bt={class:"table table-sm"},ft=g(()=>s("thead",{class:"bg-danger text-light"},[s("tr",null,[s("th",null,"Rank"),s("th",null,"Count"),s("th",null,"Unique")])],-1)),yt={class:"table-danger"},xt={class:"table table-sm"},kt=g(()=>s("thead",{class:"bg-info"},[s("tr",null,[s("th",{scope:"col"},"Portal"),s("th",{scope:"col"},"Observations"),s("th",{scope:"col"},"Users"),s("th",{scope:"col"},"States"),s("th",{scope:"col"},"Districts")])],-1)),jt={class:"table-info"},$t={class:"table table-sm"},St=g(()=>s("thead",{class:"bg-danger"},[s("tr",null,[s("th",{scope:"col"},"Portal"),s("th",{scope:"col"},"Observations"),s("th",{scope:"col"},"Users"),s("th",{scope:"col"},"States"),s("th",{scope:"col"},"Districts")])],-1)),Dt={class:"table-danger"},zt={class:"taxa"};function Ot(t,e,a,o,i,l){const m=b("MapBBMData");return c(),d("div",lt,[s("div",rt,[dt,s("ul",ct,[(c(!0),d(p,null,_(i.filters,n=>(c(),d("li",{key:n.id,class:C({active:n.active}),onClick:h=>n.active=!n.active},[s("div",pt,r(n.name),1)],10,ht))),128))])]),s("div",ut,[s("div",mt,[i.selected?(c(),d(p,{key:1},[s("table",xt,[kt,s("tbody",jt,[(c(!0),d(p,null,_(l.state_table_data.portals,(n,h)=>(c(),d("tr",{key:h},[s("td",null,r(n.portal),1),s("td",null,r(n.observations),1),s("td",null,r(n.users),1),s("td",null,r(n.states),1),s("td",null,r(n.districts),1)]))),128))])]),s("table",$t,[St,s("tbody",Dt,[(c(!0),d(p,null,_(l.state_table_data.districts,(n,h)=>(c(),d("tr",{key:h},[s("td",null,r(n.district),1),s("td",null,r(n.observations),1),s("td",null,r(n.users),1),s("td",null,r(n.taxa),1),s("td",null,r(n.districts),1)]))),128))])])],64)):(c(),d(p,{key:0},[s("table",_t,[gt,s("tbody",vt,[(c(!0),d(p,null,_(l.observation_table_stats,(n,h)=>(c(),d("tr",{key:h},[s("td",null,r(n.portal),1),s("td",null,r(n.observations),1),s("td",null,r(n.users),1),s("td",null,r(n.states),1),s("td",null,r(n.districts),1)]))),128))])]),s("table",bt,[ft,s("tbody",yt,[(c(!0),d(p,null,_(l.taxa_stats,(n,h)=>(c(),d("tr",{key:h},[s("td",null,r(n.rank),1),s("td",null,r(n.count),1),s("td",null,r(n.unique),1)]))),128))])])],64))]),s("div",zt,[f(m,{onStateSelected:l.stateSelected},null,8,["onStateSelected"])])])])}const Mt=v(nt,[["render",Ot],["__scopeId","data-v-2f1abac1"]]),x=w({});x.component("DataComponent",Mt);x.use(j);x.mount("#app");
