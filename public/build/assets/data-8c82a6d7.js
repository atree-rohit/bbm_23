import{_ as v,A as D,C as B,c as d,o as n,b as r,m as k,l as g,q as y,x as z,d as M,t as u,D as $,s as b,F as m,r as f,n as p,u as j,f as O}from"./_plugin-vue_export-helper-1d8da046.js";import{z as S,m as C,i as A,s as _,a as T,l as q,c as P,f as F}from"./indexRollupNext-2c7fa966.js";import{B as U}from"./ButterflyAnimation-7387fd3c.js";const L={name:"MapData",props:{geojson:{type:Object,required:!0},data:{type:Object,required:!0},mode:{type:String,required:!0},tooltip_third_row_label:{type:String,default:""}},emits:["mode-change","polygon-clicked"],data(){return{polygons:null,path:null,svg:null,projection:null,colors:null,max:null,height:500,width:500,zoomTransform:0,tooltip:null,selected:null}},watch:{mode(t){this.$emit("mode-change",t)},data(){this.init()}},computed:{mapData(){return this.data[this.mode]},zoom(){return S().scaleExtent([.5,250]).translateExtent([[-.5*this.width,-.75*this.height],[2.5*this.width,2.5*this.height]]).on("zoom",this.handleZoom)},mode_key(){return this.mode.slice(0,-1)}},mounted(){console.log("Map mounted: initializing"),this.geojson&&this.mapData&&this.init()},updated(){console.log("Map updated: re-initializing"),this.init()},methods:{init(){this.mapData&&this.geojson[this.mode].features?(this.init_variables(),this.init_legend(),this.init_svg(),this.render_map()):console.log("No geojson")},init_variables(){this.polygons=null,this.path=null,this.svg={},window.innerWidth<800?(this.width=window.innerWidth*.95,this.height=window.innerHeight*.45,this.projection=C().scale(550).center([112.5,17.5])):(this.height=window.innerHeight*.9,this.width=window.innerWidth*.55,this.projection=C().scale(1e3).center([95,27.5])),this.path=A().projection(this.projection),this.tooltip=this.init_tooltip()},init_tooltip(){return _("body .d3-tooltip").empty()||_("body .d3-tooltip").remove(),_("body").append("div").attr("class","d3-tooltip").style("position","absolute").style("top","0").style("z-index","10").style("visibility","hidden").style("padding","10px").style("background","rgba(0,0,0,0.75)").style("border-radius","4px").style("color","#fff").text("a simple tooltip")},init_legend(){this.colors={},this.legend={};let t=this.mapData;this.selected!=null&&(t=this.data.districts),this.max=T(t,e=>e.value),this.colors=q().domain([0,1,this.max/3,this.max]).range(["#c33","#488","#fd0","#24ff00"]).clamp(!0),this.legend=P().shapeHeight(20).shapeWidth(60).scale(this.colors).labelFormat(F(",.0f")).orient("horizontal").labelOffset(-10).labelAlign("middle").cells(6)},init_svg(){_("#map-container svg.svg-content").empty()||_("#map-container svg.svg-content").remove(),this.svg=_("#map-container").append("svg").attr("preserveAspectRatio","xMinYMin meet").attr("width",this.width).attr("height",this.height).classed("svg-content",!0),this.zoomTransform||(this.zoomTransform=D(this.svg.node())),this.height>this.width&&this.legend.shapeWidth(35).cells(4)},render_map(){let t=this.svg.append("g").classed("map-boundary",!0).selectAll("path").append("g");this.svg.append("g").classed("map-labels",!0).selectAll("text").append("g"),this.polygons=t.append("g").classed("polygons",!0),this.selected!=null?this.geojson.districts.features.filter(a=>a.properties.state==this.selected).map(a=>this.drawPolygon(a)):this.geojson[this.mode].features.forEach(e=>{this.drawPolygon(e)}),this.svg.append("g").attr("class","legend").attr("transform","translate("+this.width*.55+", 25)").call(this.legend),this.svg.call(this.zoom),this.svg.call(this.zoom.transform,this.zoomTransform)},drawPolygon(t){this.polygons.append("g").data([t]).enter().append("path").attr("d",this.path).attr("id",this.getPolygonId(t.properties)).attr("fill",e=>this.color_polygon(t.properties)).on("mouseover",(e,a)=>{this.tooltip.html(this.hover_text(t.properties)).style("visibility","visible")}).on("mousemove",(e,a)=>{this.tooltip.style("top",e.pageY-10+"px").style("left",e.pageX+10+"px")}).on("mouseout",()=>this.tooltip.html("").style("visibility","hidden")).on("click",(e,a)=>this.clicked(a))},getPolygonId(t){let e=t.region,a=[" ","&","(",")","."];return t.state!=null&&(e=t.state),t.district!=null&&(e=t.district),a.forEach(i=>{e=e.replaceAll(i,"_")}),e},async clicked(t){let e={name:t.properties[this.mode_key],value:0,mode:this.mode_key},a=this.mapData.find(i=>i.name==e.name);e.value=a?a.value:0,this.$emit("polygon-clicked",e),this.zoomToPolygon(t)},zoomToPolygon(t){let e=null;this.selected==null||this.selected!=t.properties[this.mode_key]?(e=t,this.selected=t.properties[this.mode_key]):(e=this.geojson[this.mode],this.selected=null);let[[a,i],[s,o]]=this.path.bounds(e);this.svg.transition().duration(1500).call(this.zoom.transform,B.translate(this.width/2,this.height/2).scale(Math.min(8,.9/Math.max((s-a)/this.width,(o-i)/this.height))).translate(-(a+s)/2,-(i+o)/2))},drawPolygonBoundary(t){this.polygons.append("g").data([t]).enter().append("path").classed("state-boundary",!0).classed("selected-polygon",e=>this.selected.state&&e.properties.state==this.selected.state||this.selected.region&&e.properties.region==this.selected.region).attr("properties",e=>JSON.stringify(e.properties)).attr("d",this.path).attr("id",this.getPolygonId(t.properties))},drawPolygonLabel(t,e){const a=this.regional_data[this.polygon_mode].find(s=>s[this.polygon_key]==e.properties[this.polygon_key]);let i="";a&&(i=this.format_number(a[this.data_mode])),t.append("g").data([e]).enter().append("text").classed("poly_text",!0).attr("x",s=>this.path.centroid(s)[0]).attr("y",s=>this.path.centroid(s)[1]).classed("small-text",!0).attr("text-anchor","middle").text(i).on("mouseover",()=>{this.tooltip.html(this.hover_text(e.properties)).style("visibility","visible")}).on("mousemove",(s,o)=>{this.tooltip.style("top",s.pageY-10+"px").style("left",s.pageX+10+"px")}).on("mouseout",()=>this.tooltip.html("").style("visibility","hidden")).on("click",(s,o)=>this.clicked(o))},color_polygon(t){let e="states";t.district!=null&&(e="districts");let a=e=="states"?"state":"district",i=this.data[e].find(s=>s.name==t[a]);return i?this.colors(i.value):this.colors(0)},handleZoom(t){this.zoomTransform=t.transform;let e=1/t.transform.k*.8;this.svg.selectAll(".poly_text").attr("transform",t.transform).style("font-size",`${e}rem`),this.svg.selectAll("path").attr("transform",t.transform),this.svg.selectAll("circle").attr("transform",t.transform).attr("r",e)},hover_text(t){var a,i;let e=[];if(t.district!=null)e.push(`<tr><td>District</td><td>${t.district?t.district:"-"}</td></tr>`),e.push(`<tr><td>${this.tooltip_third_row_label}</td><td>${((a=this.data.districts.find(s=>s.name==t.district))==null?void 0:a.value)||0}</td></tr>`);else{let s=this.geojson.districts.features.filter(o=>o.properties.state==t.state).length;e.push(`<tr><td>State</td><td>${t.state?t.state:"-"}</td></tr>`),e.push(`<tr><td>Districts</td><td>${s}</td></tr>`),e.push(`<tr><td>${this.tooltip_third_row_label}</td><td>${((i=this.data.states.find(o=>o.name==t.state))==null?void 0:i.value)||0}</td></tr>`)}return`<table border='1' class='d3-tooltip'>${e.join(`
`)}</table>`},format_number(t){return t.toString().replace(/\B(?=(\d{3})+(?!\d))/g,",")},capitalizeWords(t){return t?t.charAt(0).toUpperCase()+t.slice(1):""}}},W={id:"map"},I=r("div",{id:"map-container"},null,-1),E=[I];function N(t,e,a,i,s,o){return n(),d("div",W,E)}const Y=v(L,[["render",N]]);const H={name:"LoadingData",components:{ButterflyAnimation:U},computed:{...k({loading:t=>t.data.loading})}},R={key:0,class:"loading-container"},V=r("div",{class:"circle"},null,-1),X=r("div",{class:"circle"},null,-1),Z=r("div",{class:"circle"},null,-1),G=r("div",{class:"circle"},null,-1),J={class:"loading-text"};function K(t,e,a,i,s,o){const c=g("ButterflyAnimation");return t.loading?(n(),d("div",R,[V,X,Z,G,y(c,null,{default:z(()=>[r("div",J,u(t.loading),1)]),_:1})])):M("",!0)}const Q=v(H,[["render",K]]);const tt={name:"MapBBMData",components:{MapData:Y,LoadingData:Q},emits:["state-selected"],data(){return{mode:"states",years:[2020,2021,2022,2023],selected_year:2023,selected:{states:null,districts:null}}},computed:{...k({district_coordinators:t=>t.district_coordinators.all_data,geojson:t=>t.data.geojson}),...$({filtered_map_data:"data/filtered_map_data"})},methods:{valueFromLabel(t){return t.replace(/\s/g,"_").toLowerCase()},polygonClick(t){this.selected[t.mode]=this.selected[t.mode]===t.name?null:t.name,this.selected[t.mode==="state"?"district":"state"]=null,this.$emit("state-selected",this.selected)},selectYear(t){this.selected_year==t?this.selected_year=null:this.selected_year=t,b.dispatch("data/setFilter",{field:"year",value:this.selected_year})}}},et={class:"map-container"},st={class:"border border-danger d-flex justify-content-center py-1"},at=["onClick","textContent"];function it(t,e,a,i,s,o){const c=g("loading-data"),h=g("map-data");return n(),d("div",et,[r("div",st,[(n(!0),d(m,null,f(s.years,l=>(n(),d("button",{class:p(["btn btn-sm mx-1",{"btn-success":l===s.selected_year||s.selected_year==null,"btn-outline-light":l!==s.selected_year}]),key:l,onClick:x=>o.selectYear(l),textContent:u(l)},null,10,at))),128))]),y(c),y(h,{geojson:t.geojson,data:t.filtered_map_data,mode:s.mode,tooltip_third_row_label:"Observations",onModeChange:e[0]||(e[0]=l=>s.mode=l),onPolygonClicked:o.polygonClick},null,8,["geojson","data","mode","onPolygonClicked"])])}const ot=v(tt,[["render",it]]);const lt={name:"DataTable",props:{headers:{type:Array,required:!0},data:{type:Array,required:!0},total_row:{type:Boolean,required:!1,default:!1},hue:{type:String,required:!1,default:"success"}},data(){return{sort_key:this.headers.filter(t=>t.sortable)[0].name,sort_order:"desc"}},computed:{sorted_data(){let t=[],e=this.data;if(e.length)if(!this.total_row)t=this.sort_data(e);else{let a=e.pop();t=this.sort_data(e),t.push(a)}return t}},methods:{sort_data(t){return t.sort((e,a)=>{let i=e[this.sort_key],s=a[this.sort_key];return this.sort_order==="asc"?i<s?-1:i>s?1:0:i>s?-1:i<s?1:0})},cellText(t,e){let a=t[e.name];return typeof a=="number"&&(a=this.numberWithCommas(a)),a},numberWithCommas(t){return t.toString().replace(/\B(?=(\d{3})+(?!\d))/g,",")},headerSortClass(t){let e="";return t.sortable&&(e="sortable",t.name===this.sort_key&&(e+=" sort-"+this.sort_order)),e},headerClick(t){t.sortable&&(this.sort_key=t.name,this.sort_order=this.sort_order==="asc"?"desc":"asc")},totalRowClass(t,e){if(this.total_row&&e===this.sorted_data.length-1)return"total-row";if(Object.values(t).filter(a=>typeof a=="number").reduce((a,i)=>a+i,0)==0)return"empty-row"}}},nt={class:"table-container"},rt={class:"table table-sm table-hover"},dt=["textContent","onClick"],ct=["row_id"],ht=["textContent"];function pt(t,e,a,i,s,o){return n(),d("div",nt,[r("table",rt,[r("thead",{class:p(`bg-${a.hue} text-light`)},[r("tr",null,[(n(!0),d(m,null,f(a.headers,(c,h)=>(n(),d("th",{key:h,textContent:u(c.label),class:p(o.headerSortClass(c)),onClick:l=>o.headerClick(c)},null,10,dt))),128))])],2),r("tbody",{class:p(`table-${a.hue}`)},[(n(!0),d(m,null,f(o.sorted_data,(c,h)=>(n(),d("tr",{key:h,row_id:h,class:p(o.totalRowClass(c,h))},[(n(!0),d(m,null,f(a.headers,(l,x)=>(n(),d("td",{key:x,class:p(l==null?void 0:l.class),textContent:u(o.cellText(c,l))},null,10,ht))),128))],10,ct))),128))],2)])])}const ut=v(lt,[["render",pt],["__scopeId","data-v-66922171"]]);const _t={name:"DataComponent",components:{MapBBMData:ot,DataTable:ut},data(){return{filters:[{id:1,name:"Portals",active:!0,disabled:!1},{id:2,name:"Location",active:!1,disabled:!0},{id:3,name:"Taxa",active:!1,disabled:!1},{id:4,name:"Date",active:!1,disabled:!0},{id:5,name:"Users",active:!1,disabled:!0}],selected:null}},computed:{...k({geojson:t=>t.data.geojson}),...$({filtered_observations:"data/filtered_observations",table_data:"data/table_data"}),active_filter(){return this.filters.filter(t=>t.active)[0]},state_table_data(){let t={portals:[],districts:[]},e={};return Object.keys(this.filtered_observations).map(i=>{e[i]=this.filtered_observations[i].filter(s=>s[4]===this.selected)}),Object.keys(e).map(i=>{t.portals.push({portal:i,observations:e[i].length,users:this.countUnique(e[i].map(s=>s[2])),districts:this.countUnique(e[i].map(s=>s[3]))})}),t.portals.push({portal:"total",observations:Object.values(e).flat().length,users:this.countUnique(Object.values(e).flat().map(i=>i[2])),districts:this.countUnique(Object.values(e).flat().map(i=>i[3]))}),this.geojson.districts.features.filter(i=>i.properties.state===this.selected).map(i=>i.properties.district).map(i=>{let s={};Object.keys(this.filtered_observations).map(o=>{s[o]=this.filtered_observations[o].filter(c=>c[3]===i)}),t.districts.push({district:i,observations:Object.values(s).flat().length,users:this.countUnique(Object.values(s).flat().map(o=>o[2])),taxa:this.countUnique(Object.values(s).flat().map(o=>o[1])),portals:Object.entries(s).filter(o=>o[1].length>0).map(o=>o[0]).join(", ").replace("inats","iNat").replace("ibps","IBP").replace("ifbs","IFB")})}),t}},created(){b.dispatch("data/getAllData")},methods:{getObservationsCount(t){let e=0;return t.map(a=>{Object.keys(this.filtered_observations).forEach(i=>{e+=this.filtered_observations[i].filter(s=>s[1]==a.id).length})}),e},countUnique(t){return[...new Set(t)].length},selectFilterTab(t){this.filters.map(e=>{e.active=!1}),t.active=!0},async stateSelected(t){this.selected=t.state,b.dispatch("data/setFilter",{field:"state",value:this.selected})}}},mt={class:"data-container"},ft={class:"canvas"},gt={class:"map"},vt={class:"tables-container"},yt={class:"nav nav-pills bg-light justify-content-center rounded"},bt=["textContent","onClick"],xt={class:"tables"},kt={class:"bg-warning text-center py-0"},wt={key:2};function jt(t,e,a,i,s,o){const c=g("MapBBMData"),h=g("data-table");return n(),d("div",mt,[r("div",ft,[r("div",gt,[y(c,{onStateSelected:o.stateSelected},null,8,["onStateSelected"])]),r("div",vt,[r("ul",yt,[(n(!0),d(m,null,f(s.filters,l=>(n(),d("li",{class:"nav-item",key:l.id},[r("a",{class:p(["nav-link",{active:l.active,disabled:l.disabled}]),"aria-current":"page",href:"#",textContent:u(l.name),onClick:x=>o.selectFilterTab(l)},null,10,bt)]))),128))]),r("div",xt,[r("h1",kt,u(s.selected),1),o.active_filter.name=="Taxa"?(n(),j(h,{key:0,headers:t.table_data.taxa.headers,data:t.table_data.taxa.rows,total_row:!1,hue:"info"},null,8,["headers","data"])):o.active_filter.name=="Portals"?(n(),j(h,{key:1,headers:t.table_data.portals.headers,data:t.table_data.portals.rows,total_row:!0,hue:"danger"},null,8,["headers","data"])):(n(),d("div",wt,u(o.active_filter),1))])])])])}const Ct=v(_t,[["render",jt],["__scopeId","data-v-983f0633"]]),w=O({});w.component("DataComponent",Ct);w.use(b);w.mount("#app");
